plugins {
    id 'fabric-loom' version '1.9.2'
    id 'maven-publish'
}

ext {
    mod_version = '1.0.0'
    maven_group = 'ru.ceejiva'
    archives_base_name = 'PulseVisualMod'

    minecraft_version = '1.21.4'
    yarn_mappings = '1.21.4+build.8' // Обновлено
    loader_version = '0.16.10'
    fabric_version = '0.116.0+1.21.4'
}

version = project.mod_version
group = project.maven_group

base {
    archivesName = project.archives_base_name
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabricmc.net/' }
    maven { url 'https://maven.shedaniel.me/' }
    maven { url 'https://api.modrinth.com/maven' }
    // Локальный путь к Cloth Config, если он установлен вручную
    flatDir {
        dirs 'libs' // Убедитесь, что .jar Cloth Config находится в папке libs
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modImplementation "me.shedaniel.cloth:cloth-config-fabric:17.0.142" // Основная зависимость
    // Если локальная версия отличается, укажите её вручную
    modImplementation name: 'cloth-config-17.0.142-fabric', ext: 'jar' // Пример для локального .jar
    modImplementation "io.github.cottonmc:LibGui:12.0.1+1.21.2"
}

processResources {
    inputs.property "version", project.version
    inputs.property "minecraft_version", project.minecraft_version
    inputs.property "loader_version", project.loader_version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "minecraft_version": project.minecraft_version,
                "loader_version": project.loader_version
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release.set(targetJavaVersion)
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archives_base_name}" }
    }
}

publishing {
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = project.archives_base_name
            from components.java
        }
    }
    repositories {
        // Add repositories to publish to here.
    }
}